////method-1 Using Memoization actual DP BOTTOM-UP approach

int maximalSquare(vector<vector<char>>& matrix) {
        int m=matrix.size();
        int n=matrix[0].size();
        
        int result=0;
        vector<vector<int>> t(m,vector<int>(n,0));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                int val=matrix[i][j]-'0';
                if(i==0 || j==0){
                    t[i][j]=val;
                }else if(val==1){
                    t[i][j]=1+min({t[i-1][j],t[i][j-1],t[i-1][j-1]});
                }
                result=max(result,t[i][j]);
            }
        }
        return result*result;
    }

    ///top-down approach recursion + Memoization
    int m,n;
    int solve(vector<vector<char>> &matrix,int i,int j,vector<vector<int>> &t){
        if(i>=m || j>=n){
            return 0;
        }
        if(matrix[i][j]=='0'){
            return 0;
        }
        if(t[i][j]!=-1){
            return t[i][j];
        }

        int right=solve(matrix,i+1,j,t);
        int down=solve(matrix,i,j+1,t);
        int diagonal=solve(matrix,i+1,j+1,t);

        return t[i][j]=1+min({right,down,diagonal});
    }
    int maximalSquare(vector<vector<char>>& matrix) {
        m=matrix.size();
        n=matrix[0].size();
        
        int result=0;
        vector<vector<int>> t(m+1,vector<int>(n+1,-1));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(matrix[i][j]=='1'){
                    result=max(result,solve(matrix,i,j,t));
                }
            }
        }
        return result*result;
    }
