//354. Russian Doll Envelopes

///this can be solved using increasing width and decreasing height
///and also using binary search for longest increasing Subsequence

int maxEnvelopes(vector<vector<int>>& envelopes) {
        sort(envelopes.begin(),envelopes.end(),[](const vector<int> &a,const vector<int> &b){
            if(a[0]==b[0]){
                return a[1]>b[1];
            }
            return a[0]<b[0];
        });////sorting according to the increasing width and decreasing height

        vector<int> heights;

        for(auto &env: envelopes){
            heights.push_back(env[1]);
        }

        vector<int> lis;
        for(int h: heights){
            auto it=lower_bound(lis.begin(),lis.end(),h);//lis according to the height
            if(it==lis.end()){
                lis.push_back(h);
            }else{
                *it=h;
            }
        }
        return lis.size();
    }