
//this is method-1
//this is 2D DP
int numDistinct(string s, string t) {
        int m=s.size();
        int n=t.size();

        vector<vector<double>> dp(m+1,vector<double>(n+1,0));

        for(int i=0;i<=m;i++){
            dp[i][0]=1;
        }

        for(int i=1;i<=m;i++){
            for(int j=1;j<=n;j++){
                if(s[i-1]==t[j-1]){
                    dp[i][j]=dp[i-1][j]+dp[i-1][j-1];
                }else{
                    dp[i][j]=dp[i-1][j];
                }
            }
        }
        return (int)dp[m][n];
    }


///this is method-2
//using 1D DP
int numDistinct(string s, string t) {
        int m=s.size();
        int n=t.size();

        vector<double> dp(n+1,0);
        dp[0]=1;

        for(int i=1;i<=m;i++){
            for(int j=n;j>=1;j--){
                if(s[i-1]==t[j-1]){
                    dp[j]+=dp[j-1];
                }
            }
        }
        return (int)dp[n];
    }