
//188. Best Time to Buy and Sell Stock IV
int sol(vector<int>& prices, int k, int i, bool canBuy,
            vector<vector<vector<int>>>& dp) {
        // base case
        if (i == prices.size() || k == 0) {
            return 0;
        }
        // recursive case
        if (dp[i][k][canBuy] != -1) {
            return dp[i][k][canBuy];
        }
        int involve = 0, ignore = 0;
        if (canBuy == true) {
            involve = -prices[i] + sol(prices, k, i + 1, false, dp);
            ignore = sol(prices, k, i + 1, true, dp);
        } else {
            involve = prices[i] + sol(prices, k - 1, i + 1, true, dp);
            ignore = sol(prices, k, i + 1, false, dp);
        }
        return dp[i][k][canBuy] = max(involve, ignore);
    }
    int maxProfit(int k, vector<int>& prices) {
        int n = prices.size();
        vector<vector<vector<int>>> dp(
            n, vector<vector<int>>(k + 1, vector<int>(2, -1)));
        return sol(prices, k, 0, true, dp);
    }